{"version":3,"sources":["components/Post/Post.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/api.js","api/posts.js","api/comment.js","components/Loader/Loader.jsx","components/UserSelect/UserSelect.js","App.jsx","index.js"],"names":["Post","userId","title","isActive","onPostSelect","className","type","onClick","PostsList","posts","selectedUserId","onActivePostChange","useState","selectedPosts","setSelectedPost","activeId","setActiveId","useEffect","updatedPosts","filter","post","map","key","id","NewCommentForm","onSubmit","email","setEmail","name","setName","text","setText","event","preventDefault","body","value","placeholder","onChange","target","PostDetails","postId","comments","onCommentDelete","onCommentAdd","isCommentsVisible","setCommentsVisibility","length","comment","commentInfo","Object","assign","BASE_URL","getUserPosts","a","fetch","response","json","data","getComments","Loader","UserSelect","onUserSelect","selectedUser","setSelectedUser","App","loading","setLoading","setPosts","setComments","selectedPost","selectedComments","setSelectedComments","setSelectedUserId","activePostId","setActivePostId","fetchData","updatedPost","find","updatedComments","commentId","newComment","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8694dcc1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Post = ({ userId, title, isActive, onPostSelect }) => (\n  <li className=\"PostsList__item\">\n    <div>\n      <b>\n        [User #\n        {userId}\n        ]:\n      </b>\n      {title}\n    </div>\n    <button\n      type=\"button\"\n      className=\"PostsList__button button\"\n      onClick={onPostSelect}\n    >\n      {isActive ? 'Close' : 'Open'}\n    </button>\n  </li>\n);\n\nPost.propTypes = {\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  onPostSelect: PropTypes.func.isRequired,\n};\n\nexport { Post };\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { PropTypes } from 'prop-types';\nimport { Post } from '../Post';\n\nconst PostsList = ({ posts, selectedUserId, onActivePostChange }) => {\n  const [selectedPosts, setSelectedPost] = useState(posts);\n  const [activeId, setActiveId] = useState(0);\n\n  useEffect(() => {\n    const updatedPosts = posts.filter(post => (\n      selectedUserId === 0 || selectedUserId === post.userId\n    ));\n\n    setSelectedPost(updatedPosts);\n  }, [selectedUserId]);\n\n  const selectPost = (id) => {\n    if (id !== activeId) {\n      setActiveId(id);\n      onActivePostChange(id);\n    } else {\n      setActiveId(0);\n      onActivePostChange(0);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        { selectedPosts.map(post => (\n          <Post\n            key={post.id}\n            userId={post.userId}\n            title={post.title}\n            isActive={post.id === activeId}\n            onPostSelect={() => selectPost(post.id)}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  onActivePostChange: PropTypes.func.isRequired,\n};\n\nexport { PostsList };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nconst NewCommentForm = ({ onSubmit }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n\n  const changeEmail = (event) => {\n    const { value } = event.target;\n\n    setEmail(value);\n  };\n\n  const changeName = (event) => {\n    const { value } = event.target;\n\n    setName(value);\n  };\n\n  const changeText = (event) => {\n    const { value } = event.target;\n\n    setText(value);\n  };\n\n  const handleSumbit = (event) => {\n    event.preventDefault();\n\n    if (name && email && text) {\n      onSubmit({\n        name,\n        email,\n        body: text,\n      });\n\n      setName('');\n      setEmail('');\n      setText('');\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSumbit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={changeName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={changeEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={text}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={changeText}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport { NewCommentForm };\n","import React, { useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nconst PostDetails = ({\n  body,\n  postId,\n  comments,\n  onCommentDelete,\n  onCommentAdd,\n}) => {\n  const [isCommentsVisible, setCommentsVisibility] = useState(false);\n\n  const toggleCommentsVisibility = () => {\n    setCommentsVisibility(!isCommentsVisible);\n  };\n\n  const addComment = (comment) => {\n    const commentInfo = Object.assign(comment, { postId });\n\n    onCommentAdd(commentInfo);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={toggleCommentsVisibility}\n          >\n            {`${isCommentsVisible ? 'Hide' : 'Show'}\n            ${comments.length} comment${comments.length !== 1 ? 's' : ''}`}\n          </button>\n        )\n          : <p>There are no comments for this post</p>}\n\n        {isCommentsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => comment.body && (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => onCommentDelete(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onSubmit={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  body: PropTypes.string.isRequired,\n  postId: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onCommentDelete: PropTypes.func.isRequired,\n  onCommentAdd: PropTypes.func.isRequired,\n};\n\nexport { PostDetails };\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async(id) => {\n  let response;\n\n  if (id === 0) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts/${id}`);\n  }\n\n  const { data } = await response.json();\n\n  return data;\n};\n","import { BASE_URL } from './api';\n\nexport const getComments = async() => {\n  const response = await fetch(`${BASE_URL}/comments`);\n\n  const { data } = await response.json();\n\n  return data;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst UserSelect = ({ onUserSelect }) => {\n  const [selectedUser, setSelectedUser] = useState(0);\n\n  const handleSelection = (event) => {\n    const { value } = event.target;\n\n    if (+value !== selectedUser) {\n      onUserSelect(+value);\n      setSelectedUser(+value);\n    }\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select className=\"App__user-selector\" onChange={handleSelection}>\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">John Doe</option>\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  onUserSelect: PropTypes.func.isRequired,\n};\n\nexport { UserSelect };\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getComments } from './api/comment';\nimport { Loader } from './components/Loader/Loader';\nimport { UserSelect } from './components/UserSelect';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [selectedPost, setSelectedPost] = useState({});\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [activePostId, setActivePostId] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      setPosts(await getUserPosts(0));\n      setComments(await getComments());\n      setLoading(false);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const updatedPost = posts\n      .find(post => post.id === activePostId);\n    const updatedComments = comments\n      .filter(comment => comment.postId === activePostId);\n\n    setSelectedPost(updatedPost);\n    setSelectedComments(updatedComments);\n  }, [activePostId]);\n\n  const handleSelectChange = (userId) => {\n    setSelectedUserId(userId);\n  };\n\n  const handleCommentAdd = (comment) => {\n    const newComment = Object.assign(comment, { id: comments.length });\n\n    setSelectedComments(selectedComments.concat(newComment));\n    setComments(comments.concat(newComment));\n  };\n\n  const handleCommentDelete = (commentId) => {\n    setSelectedComments(selectedComments\n      .filter(comment => comment.id !== commentId));\n    setComments(comments\n      .filter(comment => comment.id !== commentId));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect onUserSelect={handleSelectChange} />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {loading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                selectedUserId={selectedUserId}\n                onActivePostChange={setActivePostId}\n              />\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          {activePostId\n            ? (\n              <PostDetails\n                {...selectedPost}\n                comments={selectedComments}\n                onCommentDelete={handleCommentDelete}\n                onCommentAdd={handleCommentAdd}\n              />\n            )\n            : <p>Choose the post from the list</p>\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}